#!/usr/bin/env python3
import requests, sys, json, os

HOST = 'http://10.10.0.1'
attack_template = r"""
#!/usr/bin/env python3
import string, requests, random, json, sys

def generate_random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
 
host = sys.argv[1]
service = 'DEFAULT-SERVICE-NAME'

resp=requests.get(f"http://10.10.0.1:8081/flagIds?service={service}&team={host}")
ids=resp.json()[service][host]

for val in ids:
LOOP_JSON_VALUES
LOOP_OTHER_VALUES
"""

loop_json_values = r"""
    try:
        val=json.loads(val)
DEFAULT-VARIABLES
        #print(flag, flush=True)
    except:
        pass
"""

loop_other_values = r"""
    try:
        curr_val = val
        print(curr_val)
        #print(flag, flush=True)
    except:
        print("Flag-ids reading failed, format not supported")
        pass
"""

services = [] #metere qui hardcode se serve
def get_services():
    url = f'{HOST}:8081'
    r = requests.get(url)
    if not '10.60.0.1' in r.text or r.status_code != 200:
        print("No response from flag-id API")
        exit()
    resp = r.text.split('\n')
    idx = 24 #se cambia esplode tutto
    while resp[idx] != '':
        services.append(resp[idx][2:])
        idx += 1

    return services
    
def create_file():
    global loop_json_values,loop_other_values
    if len(sys.argv) <= 1:
        print(r"Usage: python attack-template.py service_name")
        exit()
    service_choice = sys.argv[1]
    if service_choice is None or service_choice == '':
        print(r"Usage: python attack-template.py service_name")
        exit()
    elif not service_choice in services:
        print("Service name not found in flag-ids list")
        print("Services: ", services)
        exit()
    print(service_choice)
    file_body = attack_template
    file_body = file_body.replace('DEFAULT-SERVICE-NAME', service_choice)
    resp=requests.get(f"{HOST}:8081/flagIds?service={service_choice}&team=10.60.0.1")
    if not service_choice in resp.json():
        print("Service not found in flagid response")
        exit()
    ids=resp.json()[service_choice]['10.60.0.1']

    completed = False
    try:
        keys = list(json.loads(ids[0]).keys())
        print(keys)
        variables = ""
        for var in keys:
            variables += f"        {var} = val['{var}']\n"
        
        loop_json_values = loop_json_values.replace('DEFAULT-VARIABLES', variables)
        file_body = file_body.replace('LOOP_JSON_VALUES', loop_json_values)
        file_body = file_body.replace('LOOP_OTHER_VALUES', '')
        completed = True
    except:
        try:
            #lettura valori non json
            file_body = file_body.replace('LOOP_JSON_VALUES', '')
            file_body = file_body.replace('LOOP_OTHER_VALUES', loop_other_values)
            completed = True
        except:
            print("Flag id format not supported")

    if completed:
        file_name = f'attack-{service_choice}.py'
        try:
            if os.path.exists(file_name):
                for id in range(1, 10):
                    if not os.path.exists(f'attack-{service_choice}-{id}.py'):
                        file_name = f'attack-{service_choice}-{id}.py'
                        break
            with open(file_name, 'w') as f:
                f.write(file_body)
            print(f"File {file_name} created")
        except:
            print("Error in file creation")


if __name__ == '__main__':
    services = get_services()
    create_file()

